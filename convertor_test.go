package convertor

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/iden3/go-iden3-core/v2/w3c"
	"github.com/iden3/go-schema-processor/v2/loaders"
	"github.com/iden3/go-schema-processor/v2/merklize"
	"github.com/iden3/go-schema-processor/v2/verifiable"
	"github.com/piprate/json-gold/ld"
	"github.com/stretchr/testify/require"
)

func TestConvertorHexAmoyNetwork(t *testing.T) {
	connectionURL := os.Getenv("RPC_URL_AMOY")
	require.NotEmpty(t, connectionURL, "RPC_URL_AMOY env variable is required")

	issuerDID, err := w3c.ParseDID("did:polygonid:polygon:amoy:2qQ68JkRcf3xyDFsGSWU5QqxbKpzM75quxS628JgvJ")
	require.NoError(t, err)

	hexdata := "0x00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000a6ff88524b07a4eaab4d733c595172ff500075f6325b4a312033e4661d49e2f4f730365a85e8719000000000000001302000000000000000000000000a7576969fa84272d0f063068ceda3b44ba8dc2450000000000000000000000000000000000000000000000000617adf52dcafb0a000000000000000000000000000000000000000066506c2400000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000006628df2400000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a368747470733a2f2f676973742e67697468756275736572636f6e74656e742e636f6d2f696c79612d6b6f726f7479612f36363034393663383539663864333161376432613932636135653937303936372f7261772f366235666331346665363330633137626661353265303565303866646338333934633565613063652f6e6f6e2d6d65726b6c697a65642d6e6f6e2d7a65726f2d62616c616e63652e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003868747470733a2f2f736368656d612e6964656e332e696f2f636f72652f6a736f6e6c642f646973706c61794d6574686f642e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000742616c616e6365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a168747470733a2f2f676973742e67697468756275736572636f6e74656e742e636f6d2f696c79612d6b6f726f7479612f65313063643739613863633236616236653430343030613131383338363137652f7261772f353735656463333364343835653261346338303662616164393765323131313766336339306139662f6e6f6e2d6d65726b6c697a65642d6e6f6e2d7a65726f2d62616c616e63652e6a736f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4a736f6e536368656d6132303233000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d53386559385a436941415738716778335436535133484447656464774c5a736a50584e415a45785177525934000000000000000000000000000000000000000000000000000000000000000000000000000000000000194964656e334261736963446973706c61794d6574686f6456310000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000617adf52dcafb0a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000762616c616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000a7576969fa84272d0f063068ceda3b44ba8dc24500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000761646472657373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	ethcli, err := ethclient.Dial(connectionURL)
	require.NoError(t, err)
	w3cCred, err := W3CCredentialFromOnchainHex(
		context.Background(),
		ethcli,
		issuerDID,
		hexdata,
		"0.0.1",
	)
	require.NoError(t, err)
	bytesCred, err := json.Marshal(w3cCred)
	require.NoError(t, err)
	fmt.Println(string(bytesCred))

	require.Equal(t, w3cCred.ID, "urn:iden3:onchain:80002:0x19875eA86503734f2f9Ed461463e0312A3b42563:6")
	require.Equal(t, w3cCred.Context, []string{
		"https://www.w3.org/2018/credentials/v1",
		"https://schema.iden3.io/core/jsonld/iden3proofs.jsonld",
		"https://gist.githubusercontent.com/ilya-korotya/660496c859f8d31a7d2a92ca5e970967/raw/6b5fc14fe630c17bfa52e05e08fdc8394c5ea0ce/non-merklized-non-zero-balance.jsonld",
		"https://schema.iden3.io/core/jsonld/displayMethod.jsonld",
	})
	require.Equal(t, w3cCred.Type, []string{"VerifiableCredential", "Balance"})
	require.Equal(t, w3cCred.Expiration.UTC().Format(time.RFC3339Nano), "2024-05-24T10:29:56Z")
	require.Equal(t, w3cCred.IssuanceDate.UTC().Format(time.RFC3339Nano), "2024-04-24T10:29:56Z")
	require.Equal(t, w3cCred.CredentialSubject, map[string]interface{}{
		"address": "955350806412517903000132372584919937355495621189",
		"balance": "439010757238782730",
		"id":      "did:polygonid:polygon:amoy:2qQ68JkRcf3xyDFsGSWU5QqxbKpzM75quxS628JgvJ",
		"type":    "Balance",
	})
	require.Equal(t, w3cCred.CredentialStatus, &verifiable.CredentialStatus{
		ID:              "did:polygonid:polygon:amoy:2qQ68JkRcf3xyDFsGSWU5QqxbKpzM75quxS628JgvJ/credentialStatus?revocationNonce=6&contractAddress=80002:0x19875eA86503734f2f9Ed461463e0312A3b42563",
		Type:            "Iden3OnchainSparseMerkleTreeProof2023",
		RevocationNonce: 6,
	})
	require.Equal(t, w3cCred.Issuer, "did:polygonid:polygon:amoy:2qQ68JkRcf3xyDFsGSWU5QqxbKpzM75quxS628JgvJ")
	require.Equal(t, w3cCred.CredentialSchema, verifiable.CredentialSchema{
		ID:   "https://gist.githubusercontent.com/ilya-korotya/e10cd79a8cc26ab6e40400a11838617e/raw/575edc33d485e2a4c806baad97e21117f3c90a9f/non-merklized-non-zero-balance.json",
		Type: "JsonSchema2023",
	})
	require.Equal(t, w3cCred.DisplayMethod, &verifiable.DisplayMethod{
		ID:   "ipfs://QmS8eY8ZCiAAW8qgx3T6SQ3HDGeddwLZsjPXNAZExQwRY4",
		Type: verifiable.Iden3BasicDisplayMethodV1,
	})
	require.Len(t, w3cCred.Proof, 1)

	proof := w3cCred.Proof[0]
	proofBytes, err := json.Marshal(proof)
	require.NoError(t, err)
	var mtpProof verifiable.Iden3SparseMerkleTreeProof
	err = json.Unmarshal(proofBytes, &mtpProof)
	require.NoError(t, err)
	require.Equal(t, mtpProof.Type, verifiable.ProofType("Iden3SparseMerkleTreeProof"))
	require.Equal(t, mtpProof.IssuerData.ID, "did:polygonid:polygon:amoy:2qQ68JkRcf3xyDFsGSWU5QqxbKpzM75quxS628JgvJ")
	require.True(t, mtpProof.MTP.Existence)
}

func TestConvertorHexAmoyNetworkIPFSSchemas(t *testing.T) {
	connectionURL := os.Getenv("RPC_URL_AMOY")
	require.NotEmpty(t, connectionURL, "RPC_URL_AMOY env variable is required")
	ipfsNodeURL := os.Getenv("IPFS_NODE_URL")
	require.NotEmpty(t, ipfsNodeURL, "IPFS_NODE_URL")

	issuerDID, err := w3c.ParseDID("did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB")
	require.NoError(t, err)

	hexdata := "00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000a6ff88524b07a4eaab4d733c595172ff5000d5f21b8254fbda2754f4a1fea8ddf5989b399d21ce61ed7a3451359d013020000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e000000000000000000000000000000000000000000000001dab4a070ddad3b3b00000000000000000000000000000000000000006650bf1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000006629321c000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d613542346a4e776948745264355258476f526e63563739455a7642374c7366704867763856693478697456310000000000000000000000000000000000000000000000000000000000000000000000000000000000003868747470733a2f2f736368656d612e6964656e332e696f2f636f72652f6a736f6e6c642f646973706c61794d6574686f642e6a736f6e6c640000000000000000000000000000000000000000000000000000000000000000000000000000000742616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d634337693150435538796d4a7363476a733870716d5a45577442475750464c6d513873375036517a454c4e360000000000000000000000000000000000000000000000000000000000000000000000000000000000000e4a736f6e536368656d6132303233000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d53386559385a436941415738716778335436535133484447656464774c5a736a50584e415a45785177525934000000000000000000000000000000000000000000000000000000000000000000000000000000000000194964656e334261736963446973706c61794d6574686f645631000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000001dab4a070ddad3b3b00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000762616c616e636500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007317d19889c6dcc9ce9b894133d33d8d51cbb60e00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000761646472657373000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	ethcli, err := ethclient.Dial(connectionURL)
	require.NoError(t, err)
	w3cCred, err := W3CCredentialFromOnchainHex(
		context.Background(),
		ethcli,
		issuerDID,
		hexdata,
		"0.0.1",
		WithMerklizeOptions(
			merklize.Options{
				DocumentLoader: documentLoader(ipfsNodeURL),
			},
		),
	)
	require.NoError(t, err)
	bytesCred, err := json.Marshal(w3cCred)
	require.NoError(t, err)
	fmt.Println(string(bytesCred))

	require.Equal(t, w3cCred.ID, "urn:iden3:onchain:80002:0xFDb204CCC55794C861366dBc2Cd6BBBd25752894:0")
	require.Equal(t, w3cCred.Context, []string{
		"https://www.w3.org/2018/credentials/v1",
		"https://schema.iden3.io/core/jsonld/iden3proofs.jsonld",
		"ipfs://Qma5B4jNwiHtRd5RXGoRncV79EZvB7LsfpHgv8Vi4xitV1",
		"https://schema.iden3.io/core/jsonld/displayMethod.jsonld",
	})
	require.Equal(t, w3cCred.Type, []string{"VerifiableCredential", "Balance"})
	require.Equal(t, w3cCred.Expiration.UTC().Format(time.RFC3339Nano), "2024-05-24T16:23:56Z")
	require.Equal(t, w3cCred.IssuanceDate.UTC().Format(time.RFC3339Nano), "2024-04-24T16:23:56Z")
	require.Equal(t, w3cCred.CredentialSubject, map[string]interface{}{
		"address": "657065114158124047812701241180089030040156354062",
		"balance": "34206141476401658683",
		"id":      "did:polygonid:polygon:amoy:2qZYiH9CFMoo6oTjSEot3qzkHFHhjLRLKp8yfwCYng",
		"type":    "Balance",
	})
	require.Equal(t, w3cCred.CredentialStatus, &verifiable.CredentialStatus{
		ID:              "did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB/credentialStatus?revocationNonce=0&contractAddress=80002:0xFDb204CCC55794C861366dBc2Cd6BBBd25752894",
		Type:            "Iden3OnchainSparseMerkleTreeProof2023",
		RevocationNonce: 0,
	})
	require.Equal(t, w3cCred.Issuer, "did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB")
	require.Equal(t, w3cCred.CredentialSchema, verifiable.CredentialSchema{
		ID:   "ipfs://QmcC7i1PCU8ymJscGjs8pqmZEWtBGWPFLmQ8s7P6QzELN6",
		Type: "JsonSchema2023",
	})
	require.Equal(t, w3cCred.DisplayMethod, &verifiable.DisplayMethod{
		ID:   "ipfs://QmS8eY8ZCiAAW8qgx3T6SQ3HDGeddwLZsjPXNAZExQwRY4",
		Type: verifiable.Iden3BasicDisplayMethodV1,
	})
	require.Len(t, w3cCred.Proof, 1)

	proof := w3cCred.Proof[0]
	proofBytes, err := json.Marshal(proof)
	require.NoError(t, err)
	var mtpProof verifiable.Iden3SparseMerkleTreeProof
	err = json.Unmarshal(proofBytes, &mtpProof)
	require.NoError(t, err)
	require.Equal(t, mtpProof.Type, verifiable.ProofType("Iden3SparseMerkleTreeProof"))
	require.Equal(t, mtpProof.IssuerData.ID, "did:polygonid:polygon:amoy:2qQ68JkRcf3z3923i5rrszrsJ4kdu4GKWARQ5eftsB")
	require.True(t, mtpProof.MTP.Existence)
}

func documentLoader(ipfsNodeURL string) ld.DocumentLoader {
	var ipfsNode loaders.IPFSClient
	if ipfsNodeURL != "" {
		ipfsNode = &ipfsCli{rpcURL: ipfsNodeURL}
	}

	return loaders.NewDocumentLoader(ipfsNode, "")
}

type ipfsCli struct {
	rpcURL string
}

func (c *ipfsCli) Cat(path string) (io.ReadCloser, error) {
	rpcURL := strings.TrimRight(c.rpcURL, "/") + "/api/v0/cat?arg=" +
		url.QueryEscape(path)
	resp, err := http.DefaultClient.Post(rpcURL, "", http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("failed to send IPFS CAT request: %w", err)
	}
	if resp.StatusCode != http.StatusOK {
		_ = resp.Body.Close()
		return nil, fmt.Errorf("unexpected status code from IPFS RPC: %d",
			resp.StatusCode)
	}
	return resp.Body, nil
}
